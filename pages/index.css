// File: pages/index.js
import Head from 'next/head';
import { useState } from 'react';
import styles from '../styles/Home.module.css';

export default function Home() {
  const [hoveredNode, setHoveredNode] = useState(null);

  // Define all nodes and their connections
  const nodes = [
    { id: 'otto', label: 'Otto Cycle Engine', x: 460, y: 320, color: '#9b4dca' },
    { id: 'racing', label: 'Racing', x: 90, y: 195, color: '#ff9999' },
    { id: 'motorsports', label: 'Motorsports', x: 138, y: 252, color: '#ffccff' },
    { id: 'roadTrips', label: 'Road Trips', x: 140, y: 310, color: '#ff9999' },
    { id: 'expressionArt', label: 'Expression in Art', x: 140, y: 370, color: '#ff9999' },
    { id: 'motorcycles', label: 'Motorcycles', x: 245, y: 195, color: '#ffccff' },
    { id: 'culture', label: 'Culture', x: 300, y: 310, color: '#ffccff' },
    { id: 'infrastructure', label: 'Increased Infrastructure', x: 270, y: 430, color: '#ff9999' },
    { id: 'aviation', label: 'Aviation', x: 290, y: 130, color: '#ffccff' },
    { id: 'transportation', label: 'Transportation', x: 398, y: 250, color: '#ffccff' },
    { id: 'marineEngines', label: 'Marine Engines', x: 458, y: 130, color: '#ffccff' },
    { id: 'construction', label: 'Construction', x: 360, y: 370, color: '#ffccff' },
    { id: 'industry', label: 'Industry', x: 520, y: 370, color: '#ffccff' },
    { id: 'agriculture', label: 'Agriculture', x: 520, y: 430, color: '#ffccff' },
    { id: 'automobiles', label: 'Automobiles', x: 520, y: 195, color: '#ffccff' },
    { id: 'society', label: 'Society', x: 580, y: 250, color: '#ffccff' },
    { id: 'technology', label: 'Technology', x: 650, y: 310, color: '#ffccff' },
    { id: 'engineRefinement', label: 'Engine Refinement', x: 715, y: 370, color: '#ffccff' },
    { id: 'mechanization', label: 'Mechanization', x: 690, y: 430, color: '#ffccff' },
    { id: 'tradeBenefit', label: 'Increased Trade', x: 365, y: 70, color: '#ff9999' },
    { id: 'jobsCreated', label: 'Led to New Jobs', x: 685, y: 70, color: '#9b4dca' },
    { id: 'military', label: 'Military Improvements', x: 717, y: 130, color: '#ff9999' },
    { id: 'economics', label: 'Improved Economics', x: 735, y: 195, color: '#ff9999' },
    { id: 'environmentIssues', label: 'Environment Issues', x: 780, y: 250, color: '#ff9999' },
    { id: 'emissions', label: 'More Emmisions', x: 885, y: 310, color: '#ff9999' },
    { id: 'efficiency', label: 'Efficiency', x: 850, y: 430, color: '#ff9999' }
  ];

  // Define connections between nodes
  const connections = [
    { from: 'otto', to: 'transportation' },
    { from: 'otto', to: 'culture' },
    { from: 'otto', to: 'technology' },
    { from: 'otto', to: 'industry' },
    { from: 'transportation', to: 'aviation' },
    { from: 'transportation', to: 'motorcycles' },
    { from: 'transportation', to: 'automobiles' },
    { from: 'transportation', to: 'marineEngines' },
    { from: 'marineEngines', to: 'tradeBenefit' },
    { from: 'aviation', to: 'tradeBenefit' },
    { from: 'marineEngines', to: 'military' },
    { from: 'motorcycles', to: 'racing' },
    { from: 'culture', to: 'expressionArt' },
    { from: 'culture', to: 'roadTrips' },
    { from: 'culture', to: 'motorsports' },
    { from: 'motorsports', to: 'racing' },
    { from: 'industry', to: 'construction' },
    { from: 'industry', to: 'agriculture' },
    { from: 'agriculture', to: 'mechanization' },
    { from: 'construction', to: 'infrastructure' },
    { from: 'technology', to: 'engineRefinement' },
    { from: 'technology', to: 'environmentIssues' },
    { from: 'environmentIssues', to: 'emissions' },
    { from: 'engineRefinement', to: 'efficiency' },
    { from: 'society', to: 'environmentIssues' },
    { from: 'automobiles', to: 'economics' },
    { from: 'jobsCreated', to: 'military' }
  ];

  // Function to determine if a connection should be highlighted
  const isConnectionHighlighted = (connection) => {
    return hoveredNode === connection.from;
  };

  // Function to determine if a node should be highlighted
  const isNodeHighlighted = (nodeId) => {
    if (!hoveredNode) return false;
    
    if (nodeId === hoveredNode) return true;
    
    return connections.some(conn => 
      conn.from === hoveredNode && conn.to === nodeId
    );
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Otto Cycle Engine Mind Map</title>
        <meta name="description" content="Interactive mind map of Otto Cycle Engine impacts" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div className={styles.mindMap}>
          <svg width="1000" height="500" className={styles.svg}>
            {/* Draw connections first so they appear behind nodes */}
            {connections.map((connection, index) => {
              const fromNode = nodes.find(n => n.id === connection.from);
              const toNode = nodes.find(n => n.id === connection.to);
              
              if (!fromNode || !toNode) return null;
              
              const highlighted = isConnectionHighlighted(connection);
              
              return (
                <g key={`connection-${index}`}>
                  <path
                    d={`M${fromNode.x} ${fromNode.y} L${toNode.x} ${toNode.y}`}
                    stroke={highlighted ? "#ff00ff" : "#330066"}
                    strokeWidth={highlighted ? "3" : "2"}
                    className={styles.connection}
                  />
                  {/* Arrow head */}
                  <polygon
                    points={calculateArrowhead(fromNode.x, fromNode.y, toNode.x, toNode.y)}
                    fill={highlighted ? "#ff00ff" : "#330066"}
                    className={styles.arrowhead}
                  />
                </g>
              );
            })}
            
            {/* Draw nodes on top of connections */}
            {nodes.map((node) => (
              <g 
                key={node.id}
                onMouseEnter={() => setHoveredNode(node.id)}
                onMouseLeave={() => setHoveredNode(null)}
                className={styles.nodeGroup}
              >
                <rect
                  x={node.x - node.label.length * 4}
                  y={node.y - 15}
                  width={node.label.length * 8}
                  height={30}
                  rx={15}
                  ry={15}
                  fill={node.color}
                  stroke={isNodeHighlighted(node.id) ? "#ff00ff" : "transparent"}
                  strokeWidth={isNodeHighlighted(node.id) ? "3" : "0"}
                  className={styles.node}
                />
                <text
                  x={node.x}
                  y={node.y + 5}
                  textAnchor="middle"
                  fill="#000000"
                  className={styles.nodeText}
                >
                  {node.label}
                </text>
              </g>
            ))}
          </svg>
        </div>
      </main>
    </div>
  );
}

// Helper function to calculate arrowhead points
function calculateArrowhead(x1, y1, x2, y2) {
  const angle = Math.atan2(y2 - y1, x2 - x1);
  const size = 10;
  
  // Calculate the point slightly before the end
  const endX = x2 - Math.cos(angle) * 15;
  const endY = y2 - Math.sin(angle) * 15;
  
  // Calculate the points for the arrowhead
  const point1X = endX - size * Math.cos(angle - Math.PI / 6);
  const point1Y = endY - size * Math.sin(angle - Math.PI / 6);
  
  const point2X = endX - size * Math.cos(angle + Math.PI / 6);
  const point2Y = endY - size * Math.sin(angle + Math.PI / 6);
  
  return `${endX},${endY} ${point1X},${point1Y} ${point2X},${point2Y}`;
}
